app PDF_AI {
  wasp: {
    version: "^0.11.1"
  },
  title: "PDF_AI",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id       Int    @id @default(autoincrement())
    username String @unique
    password String
    pdfs     Pdf[]
psl=}

entity Pdf {=psl
    id      Int    @id @default(autoincrement())
    content String
    user    User   @relation(fields: [userId], references: [id])
    userId  Int
psl=}

action uploadPdf {
  fn: import { uploadPdf } from "@server/actions.js",
  entities: [User, Pdf]
}

action askQuestion {
  fn: import { askQuestion } from "@server/actions.js",
  entities: [User, Pdf]
}

query getUserPdfs {
  fn: import { getUserPdfs } from "@server/queries.js",
  entities: [User, Pdf]
}

query getPdf {
  fn: import { getPdf } from "@server/queries.js",
  entities: [User, Pdf]
}

route DashboardRoute { path: "/", to: DashboardPage }
page DashboardPage {
  component: import { Dashboard } from "@client/pages/Dashboard.jsx",
  authRequired: true
}

route PdfRoute { path: "/pdf/:pdfId", to: PdfPage }
page PdfPage {
  component: import { Pdf } from "@client/Pdf.jsx",
  authRequired: true
}